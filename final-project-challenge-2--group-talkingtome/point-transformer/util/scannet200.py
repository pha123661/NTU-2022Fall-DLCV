import os

import numpy as np
from plyfile import PlyData
from torch.utils.data import Dataset

from util.data_util import data_prepare

# # split files
# import random
# ALL_FILES = open('../dataset/scannet200/train.txt', 'r').readlines()
# random.shuffle(ALL_FILES)
# open(
#     "../dataset/scannet200/train_split.txt", 'w').writelines(sorted(ALL_FILES[:int(len(ALL_FILES) * 0.8)]))
# open(
#     "../dataset/scannet200/val_split.txt", 'w').writelines(sorted(ALL_FILES[int(len(ALL_FILES) * 0.8):]))


class SCANNET200(Dataset):
    def __init__(self, split='train', data_root='dataset/scannet200', voxel_size=0.04, voxel_max=None, transform=None, shuffle_index=False, loop=1, ignore_idx=255, return_filename=False, mix3d=False):
        super().__init__()
        self.split, self.data_root, self.voxel_size, self.transform, self.voxel_max, self.shuffle_index, self.loop, self.return_filename, self.mix3d = split, data_root, voxel_size, transform, voxel_max, shuffle_index, loop, return_filename, mix3d
        try:
            self.data_list = sorted(l.strip() for l in open(os.path.join(
                self.data_root, f"{split}_split.txt"), 'r').readlines())
        except FileNotFoundError:
            raise BaseException(
                f"split file {os.path.join(self.data_root, f'{split}_split.txt')} not found, make sure it is placed correctly!")

        # discard other labels not in the 200 classes
        global g_ignore_idx
        g_ignore_idx = ignore_idx
        self.label_transform = np.vectorize(label_transform)
        print("Totally {} samples in {} set.".format(len(self.data_list), split))

    def __getitem__(self, idx):
        idx = idx % len(self.data_list)
        ply_path = os.path.join(self.data_root, self.data_list[idx])
        ply_data = PlyData.read(ply_path)
        coord = np.stack([ply_data.elements[0][column]
                         for column in ['x', 'y', 'z']], axis=1)
        feat = np.stack([ply_data.elements[0][column]
                         for column in ['red', 'green', 'blue']], axis=1)
        label = ply_data.elements[0]['label'].astype(int)
        label = self.label_transform(label)

        # print(coord.shape, coord.dtype) # (N, 3) float32
        # print(feat.shape, feat.dtype)   # (N, 3) uint8
        # print(label.shape, label.dtype) # (N,)   int64
        coord, feat, label = data_prepare(
            coord, feat, label, self.split, self.voxel_size, self.voxel_max, self.transform, self.shuffle_index, self.mix3d)
        if self.return_filename:
            return coord, feat, label, os.path.basename(self.data_list[idx])

        return coord, feat, label

    def __len__(self):
        return len(self.data_list) * self.loop


# constants
VALID_CLASS_IDS_200 = (
    1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 58, 59, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
    72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 84, 86, 87, 88, 89, 90, 93, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 115, 116, 118, 120, 121, 122, 125, 128, 130, 131, 132, 134, 136, 138, 139, 140, 141, 145, 148, 154,
    155, 156, 157, 159, 161, 163, 165, 166, 168, 169, 170, 177, 180, 185, 188, 191, 193, 195, 202, 208, 213, 214, 221, 229, 230, 232, 233, 242, 250, 261, 264, 276, 283, 286, 300, 304, 312, 323, 325, 331, 342, 356, 370, 392, 395, 399, 408, 417,
    488, 540, 562, 570, 572, 581, 609, 748, 776, 1156, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191)
label2idx = {v: i for i, v in enumerate(VALID_CLASS_IDS_200)}

g_ignore_idx = None


def label_transform(label):
    global g_ignore_idx
    if label in label2idx:
        return label2idx[label]
    else:
        return g_ignore_idx


CLASS_LABELS_200 = (
    'wall', 'chair', 'floor', 'table', 'door', 'couch', 'cabinet', 'shelf', 'desk', 'office chair', 'bed', 'pillow', 'sink', 'picture', 'window', 'toilet', 'bookshelf', 'monitor', 'curtain', 'book', 'armchair', 'coffee table', 'box',
    'refrigerator', 'lamp', 'kitchen cabinet', 'towel', 'clothes', 'tv', 'nightstand', 'counter', 'dresser', 'stool', 'cushion', 'plant', 'ceiling', 'bathtub', 'end table', 'dining table', 'keyboard', 'bag', 'backpack', 'toilet paper',
    'printer', 'tv stand', 'whiteboard', 'blanket', 'shower curtain', 'trash can', 'closet', 'stairs', 'microwave', 'stove', 'shoe', 'computer tower', 'bottle', 'bin', 'ottoman', 'bench', 'board', 'washing machine', 'mirror', 'copier',
    'basket', 'sofa chair', 'file cabinet', 'fan', 'laptop', 'shower', 'paper', 'person', 'paper towel dispenser', 'oven', 'blinds', 'rack', 'plate', 'blackboard', 'piano', 'suitcase', 'rail', 'radiator', 'recycling bin', 'container',
    'wardrobe', 'soap dispenser', 'telephone', 'bucket', 'clock', 'stand', 'light', 'laundry basket', 'pipe', 'clothes dryer', 'guitar', 'toilet paper holder', 'seat', 'speaker', 'column', 'bicycle', 'ladder', 'bathroom stall', 'shower wall',
    'cup', 'jacket', 'storage bin', 'coffee maker', 'dishwasher', 'paper towel roll', 'machine', 'mat', 'windowsill', 'bar', 'toaster', 'bulletin board', 'ironing board', 'fireplace', 'soap dish', 'kitchen counter', 'doorframe',
    'toilet paper dispenser', 'mini fridge', 'fire extinguisher', 'ball', 'hat', 'shower curtain rod', 'water cooler', 'paper cutter', 'tray', 'shower door', 'pillar', 'ledge', 'toaster oven', 'mouse', 'toilet seat cover dispenser',
    'furniture', 'cart', 'storage container', 'scale', 'tissue box', 'light switch', 'crate', 'power outlet', 'decoration', 'sign', 'projector', 'closet door', 'vacuum cleaner', 'candle', 'plunger', 'stuffed animal', 'headphones', 'dish rack',
    'broom', 'guitar case', 'range hood', 'dustpan', 'hair dryer', 'water bottle', 'handicap bar', 'purse', 'vent', 'shower floor', 'water pitcher', 'mailbox', 'bowl', 'paper bag', 'alarm clock', 'music stand', 'projector screen', 'divider',
    'laundry detergent', 'bathroom counter', 'object', 'bathroom vanity', 'closet wall', 'laundry hamper', 'bathroom stall door', 'ceiling light', 'trash bin', 'dumbbell', 'stair rail', 'tube', 'bathroom cabinet', 'cd case', 'closet rod',
    'coffee kettle', 'structure', 'shower head', 'keyboard piano', 'case of water bottles', 'coat rack', 'storage organizer', 'folded chair', 'fire alarm', 'power strip', 'calendar', 'poster', 'potted plant', 'luggage', 'mattress')

SCANNET_COLOR_MAP_200 = {
    0: (0., 0., 0.),
    1: (174., 199., 232.),
    2: (188., 189., 34.),
    3: (152., 223., 138.),
    4: (255., 152., 150.),
    5: (214., 39., 40.),
    6: (91., 135., 229.),
    7: (31., 119., 180.),
    8: (229., 91., 104.),
    9: (247., 182., 210.),
    10: (91., 229., 110.),
    11: (255., 187., 120.),
    13: (141., 91., 229.),
    14: (112., 128., 144.),
    15: (196., 156., 148.),
    16: (197., 176., 213.),
    17: (44., 160., 44.),
    18: (148., 103., 189.),
    19: (229., 91., 223.),
    21: (219., 219., 141.),
    22: (192., 229., 91.),
    23: (88., 218., 137.),
    24: (58., 98., 137.),
    26: (177., 82., 239.),
    27: (255., 127., 14.),
    28: (237., 204., 37.),
    29: (41., 206., 32.),
    31: (62., 143., 148.),
    32: (34., 14., 130.),
    33: (143., 45., 115.),
    34: (137., 63., 14.),
    35: (23., 190., 207.),
    36: (16., 212., 139.),
    38: (90., 119., 201.),
    39: (125., 30., 141.),
    40: (150., 53., 56.),
    41: (186., 197., 62.),
    42: (227., 119., 194.),
    44: (38., 100., 128.),
    45: (120., 31., 243.),
    46: (154., 59., 103.),
    47: (169., 137., 78.),
    48: (143., 245., 111.),
    49: (37., 230., 205.),
    50: (14., 16., 155.),
    51: (196., 51., 182.),
    52: (237., 80., 38.),
    54: (138., 175., 62.),
    55: (158., 218., 229.),
    56: (38., 96., 167.),
    57: (190., 77., 246.),
    58: (208., 49., 84.),
    59: (208., 193., 72.),
    62: (55., 220., 57.),
    63: (10., 125., 140.),
    64: (76., 38., 202.),
    65: (191., 28., 135.),
    66: (211., 120., 42.),
    67: (118., 174., 76.),
    68: (17., 242., 171.),
    69: (20., 65., 247.),
    70: (208., 61., 222.),
    71: (162., 62., 60.),
    72: (210., 235., 62.),
    73: (45., 152., 72.),
    74: (35., 107., 149.),
    75: (160., 89., 237.),
    76: (227., 56., 125.),
    77: (169., 143., 81.),
    78: (42., 143., 20.),
    79: (25., 160., 151.),
    80: (82., 75., 227.),
    82: (253., 59., 222.),
    84: (240., 130., 89.),
    86: (123., 172., 47.),
    87: (71., 194., 133.),
    88: (24., 94., 205.),
    89: (134., 16., 179.),
    90: (159., 32., 52.),
    93: (213., 208., 88.),
    95: (64., 158., 70.),
    96: (18., 163., 194.),
    97: (65., 29., 153.),
    98: (177., 10., 109.),
    99: (152., 83., 7.),
    100: (83., 175., 30.),
    101: (18., 199., 153.),
    102: (61., 81., 208.),
    103: (213., 85., 216.),
    104: (170., 53., 42.),
    105: (161., 192., 38.),
    106: (23., 241., 91.),
    107: (12., 103., 170.),
    110: (151., 41., 245.),
    112: (133., 51., 80.),
    115: (184., 162., 91.),
    116: (50., 138., 38.),
    118: (31., 237., 236.),
    120: (39., 19., 208.),
    121: (223., 27., 180.),
    122: (254., 141., 85.),
    125: (97., 144., 39.),
    128: (106., 231., 176.),
    130: (12., 61., 162.),
    131: (124., 66., 140.),
    132: (137., 66., 73.),
    134: (250., 253., 26.),
    136: (55., 191., 73.),
    138: (60., 126., 146.),
    139: (153., 108., 234.),
    140: (184., 58., 125.),
    141: (135., 84., 14.),
    145: (139., 248., 91.),
    148: (53., 200., 172.),
    154: (63., 69., 134.),
    155: (190., 75., 186.),
    156: (127., 63., 52.),
    157: (141., 182., 25.),
    159: (56., 144., 89.),
    161: (64., 160., 250.),
    163: (182., 86., 245.),
    165: (139., 18., 53.),
    166: (134., 120., 54.),
    168: (49., 165., 42.),
    169: (51., 128., 133.),
    170: (44., 21., 163.),
    177: (232., 93., 193.),
    180: (176., 102., 54.),
    185: (116., 217., 17.),
    188: (54., 209., 150.),
    191: (60., 99., 204.),
    193: (129., 43., 144.),
    195: (252., 100., 106.),
    202: (187., 196., 73.),
    208: (13., 158., 40.),
    213: (52., 122., 152.),
    214: (128., 76., 202.),
    221: (187., 50., 115.),
    229: (180., 141., 71.),
    230: (77., 208., 35.),
    232: (72., 183., 168.),
    233: (97., 99., 203.),
    242: (172., 22., 158.),
    250: (155., 64., 40.),
    261: (118., 159., 30.),
    264: (69., 252., 148.),
    276: (45., 103., 173.),
    283: (111., 38., 149.),
    286: (184., 9., 49.),
    300: (188., 174., 67.),
    304: (53., 206., 53.),
    312: (97., 235., 252.),
    323: (66., 32., 182.),
    325: (236., 114., 195.),
    331: (241., 154., 83.),
    342: (133., 240., 52.),
    356: (16., 205., 144.),
    370: (75., 101., 198.),
    392: (237., 95., 251.),
    395: (191., 52., 49.),
    399: (227., 254., 54.),
    408: (49., 206., 87.),
    417: (48., 113., 150.),
    488: (125., 73., 182.),
    540: (229., 32., 114.),
    562: (158., 119., 28.),
    570: (60., 205., 27.),
    572: (18., 215., 201.),
    581: (79., 76., 153.),
    609: (134., 13., 116.),
    748: (192., 97., 63.),
    776: (108., 163., 18.),
    1156: (95., 220., 156.),
    1163: (98., 141., 208.),
    1164: (144., 19., 193.),
    1165: (166., 36., 57.),
    1166: (212., 202., 34.),
    1167: (23., 206., 34.),
    1168: (91., 211., 236.),
    1169: (79., 55., 137.),
    1170: (182., 19., 117.),
    1171: (134., 76., 14.),
    1172: (87., 185., 28.),
    1173: (82., 224., 187.),
    1174: (92., 110., 214.),
    1175: (168., 80., 171.),
    1176: (197., 63., 51.),
    1178: (175., 199., 77.),
    1179: (62., 180., 98.),
    1180: (8., 91., 150.),
    1181: (77., 15., 130.),
    1182: (154., 65., 96.),
    1183: (197., 152., 11.),
    1184: (59., 155., 45.),
    1185: (12., 147., 145.),
    1186: (54., 35., 219.),
    1187: (210., 73., 181.),
    1188: (221., 124., 77.),
    1189: (149., 214., 66.),
    1190: (72., 185., 134.),
    1191: (42., 94., 198.),
}

CLASS_FREQUENCY_200 = {
    0: 28846556,
    1: 5724064,
    2: 22601567,
    3: 2878057,
    4: 3743637,
    5: 2354252,
    6: 2494992,
    7: 2416439,
    8: 1855083,
    9: 885442,
    10: 2379144,
    11: 371431,
    12: 255033,
    13: 454972,
    14: 3693457,
    15: 293829,
    16: 2382845,
    17: 570621,
    18: 1847184,
    19: 831180,
    20: 782322,
    21: 491049,
    22: 329867,
    23: 489067,
    24: 212621,
    25: 1156595,
    26: 185048,
    27: 390416,
    28: 332033,
    29: 304057,
    30: 192769,
    31: 420522,
    32: 193359,
    33: 33917,
    34: 539192,
    35: 2688553,
    36: 293670,
    37: 101933,
    38: 93102,
    39: 36695,
    40: 89834,
    41: 245390,
    42: 28666,
    43: 108751,
    44: 188438,
    45: 801887,
    46: 120508,
    47: 298524,
    48: 808913,
    49: 266098,
    50: 167056,
    51: 103662,
    52: 219198,
    53: 50764,
    54: 110835,
    55: 27727,
    56: 15928,
    57: 119831,
    58: 102638,
    59: 142292,
    60: 94904,
    61: 215020,
    62: 236779,
    63: 20850,
    64: 214119,
    65: 186019,
    66: 60011,
    67: 36882,
    68: 249424,
    69: 25625,
    70: 69709,
    71: 75909,
    72: 24140,
    73: 167893,
    74: 28722,
    75: 4982,
    76: 252783,
    77: 56176,
    78: 94783,
    79: 15568,
    80: 426593,
    81: 145991,
    82: 23633,
    83: 233672,
    84: 13717,
    85: 21938,
    86: 16288,
    87: 9032,
    88: 34767,
    89: 43634,
    90: 39415,
    91: 27486,
    92: 60399,
    93: 16396,
    94: 4046,
    95: 41277,
    96: 7688,
    97: 65246,
    98: 16029,
    99: 50261,
    100: 347580,
    101: 456751,
    102: 16242,
    103: 71402,
    104: 21465,
    105: 39067,
    106: 28624,
    107: 7892,
    108: 27553,
    109: 18883,
    110: 81615,
    111: 11916,
    112: 2211,
    113: 67982,
    114: 7744,
    115: 60486,
    116: 3952,
    117: 262915,
    118: 678150,
    119: 15127,
    120: 112891,
    121: 5943,
    122: 18444,
    123: 4194,
    124: 5879,
    125: 32081,
    126: 10535,
    127: 14343,
    128: 22023,
    129: 74124,
    130: 27912,
    131: 6191,
    132: 6925,
    133: 6739,
    134: 41267,
    135: 72398,
    136: 19980,
    137: 3396,
    138: 10421,
    139: 1778,
    140: 11230,
    141: 779,
    142: 49136,
    143: 9393,
    144: 4084,
    145: 124223,
    146: 12117,
    147: 3647,
    148: 3583,
    149: 7237,
    150: 1523,
    151: 23900,
    152: 5286,
    153: 17758,
    154: 29925,
    155: 5069,
    156: 1110,
    157: 4217,
    158: 5875,
    159: 5981,
    160: 8645,
    161: 4629,
    162: 4013,
    163: 204267,
    164: 4135,
    165: 13550,
    166: 1395,
    167: 11331,
    168: 52581,
    169: 17766,
    170: 5216,
    171: 47046,
    172: 419060,
    173: 217800,
    174: 113729,
    175: 29127,
    176: 91576,
    177: 26083,
    178: 37204,
    179: 6413,
    180: 80652,
    181: 13590,
    182: 109472,
    183: 5681,
    184: 12696,
    185: 3096,
    186: 49187,
    187: 1047,
    188: 2281,
    189: 8933,
    190: 1696,
    191: 24775,
    192: 19246,
    193: 1309,
    194: 1056,
    195: 4318,
    196: 20836,
    197: 18830,
    198: 7661,
    199: 24867,
    # 255: 14396631
}

CLASS_INVERSE_FREQUENCY = [1 - (CLASS_FREQUENCY_200[k] / sum(CLASS_FREQUENCY_200.values()))
                           for k in sorted(CLASS_FREQUENCY_200.keys())]

if __name__ == "__main__":
    # get class distribution for focal loss
    from collections import Counter
    from pprint import pprint

    from tqdm import tqdm

    cnt = Counter()
    dataset = SCANNET200(data_root='../dataset/scannet200', loop=1)
    for idx, (coor, rgb, label) in enumerate(tqdm(dataset)):
        if idx == len(dataset):
            break
        tmp = Counter(label)
        cnt += tmp
    cnt = {k: cnt[k] for k in sorted(cnt.keys())}
    pprint(cnt)

'''
Class frequency for train-split:
{
    0: 28846556,
    1: 5724064,
    2: 22601567,
    3: 2878057,
    4: 3743637,
    5: 2354252,
    6: 2494992,
    7: 2416439,
    8: 1855083,
    9: 885442,
    10: 2379144,
    11: 371431,
    12: 255033,
    13: 454972,
    14: 3693457,
    15: 293829,
    16: 2382845,
    17: 570621,
    18: 1847184,
    19: 831180,
    20: 782322,
    21: 491049,
    22: 329867,
    23: 489067,
    24: 212621,
    25: 1156595,
    26: 185048,
    27: 390416,
    28: 332033,
    29: 304057,
    30: 192769,
    31: 420522,
    32: 193359,
    33: 33917,
    34: 539192,
    35: 2688553,
    36: 293670,
    37: 101933,
    38: 93102,
    39: 36695,
    40: 89834,
    41: 245390,
    42: 28666,
    43: 108751,
    44: 188438,
    45: 801887,
    46: 120508,
    47: 298524,
    48: 808913,
    49: 266098,
    50: 167056,
    51: 103662,
    52: 219198,
    53: 50764,
    54: 110835,
    55: 27727,
    56: 15928,
    57: 119831,
    58: 102638,
    59: 142292,
    60: 94904,
    61: 215020,
    62: 236779,
    63: 20850,
    64: 214119,
    65: 186019,
    66: 60011,
    67: 36882,
    68: 249424,
    69: 25625,
    70: 69709,
    71: 75909,
    72: 24140,
    73: 167893,
    74: 28722,
    75: 4982,
    76: 252783,
    77: 56176,
    78: 94783,
    79: 15568,
    80: 426593,
    81: 145991,
    82: 23633,
    83: 233672,
    84: 13717,
    85: 21938,
    86: 16288,
    87: 9032,
    88: 34767,
    89: 43634,
    90: 39415,
    91: 27486,
    92: 60399,
    93: 16396,
    94: 4046,
    95: 41277,
    96: 7688,
    97: 65246,
    98: 16029,
    99: 50261,
    100: 347580,
    101: 456751,
    102: 16242,
    103: 71402,
    104: 21465,
    105: 39067,
    106: 28624,
    107: 7892,
    108: 27553,
    109: 18883,
    110: 81615,
    111: 11916,
    112: 2211,
    113: 67982,
    114: 7744,
    115: 60486,
    116: 3952,
    117: 262915,
    118: 678150,
    119: 15127,
    120: 112891,
    121: 5943,
    122: 18444,
    123: 4194,
    124: 5879,
    125: 32081,
    126: 10535,
    127: 14343,
    128: 22023,
    129: 74124,
    130: 27912,
    131: 6191,
    132: 6925,
    133: 6739,
    134: 41267,
    135: 72398,
    136: 19980,
    137: 3396,
    138: 10421,
    139: 1778,
    140: 11230,
    141: 779,
    142: 49136,
    143: 9393,
    144: 4084,
    145: 124223,
    146: 12117,
    147: 3647,
    148: 3583,
    149: 7237,
    150: 1523,
    151: 23900,
    152: 5286,
    153: 17758,
    154: 29925,
    155: 5069,
    156: 1110,
    157: 4217,
    158: 5875,
    159: 5981,
    160: 8645,
    161: 4629,
    162: 4013,
    163: 204267,
    164: 4135,
    165: 13550,
    166: 1395,
    167: 11331,
    168: 52581,
    169: 17766,
    170: 5216,
    171: 47046,
    172: 419060,
    173: 217800,
    174: 113729,
    175: 29127,
    176: 91576,
    177: 26083,
    178: 37204,
    179: 6413,
    180: 80652,
    181: 13590,
    182: 109472,
    183: 5681,
    184: 12696,
    185: 3096,
    186: 49187,
    187: 1047,
    188: 2281,
    189: 8933,
    190: 1696,
    191: 24775,
    192: 19246,
    193: 1309,
    194: 1056,
    195: 4318,
    196: 20836,
    197: 18830,
    198: 7661,
    199: 24867,
    255: 14396631
}
'''
'''
Class distribution for all labeld data:
{
    0: 36313663,
    1: 7123598,
    2: 28529463,
    3: 3659820,
    4: 4632889,
    5: 2913093,
    6: 2920352,
    7: 3132358,
    8: 2366714,
    9: 1162453,
    10: 2979623,
    11: 442810,
    12: 305419,
    13: 566288,
    14: 4725019,
    15: 354072,
    16: 2921535,
    17: 659321,
    18: 2244133,
    19: 1043172,
    20: 914823,
    21: 638861,
    22: 447682,
    23: 567653,
    24: 263972,
    25: 1426188,
    26: 237305,
    27: 508615,
    28: 419290,
    29: 356273,
    30: 238958,
    31: 522264,
    32: 238166,
    33: 37065,
    34: 765846,
    35: 3486721,
    36: 354233,
    37: 121994,
    38: 93102,
    39: 43669,
    40: 115181,
    41: 303151,
    42: 35727,
    43: 136587,
    44: 238518,
    45: 1069570,
    46: 146545,
    47: 336096,
    48: 982496,
    49: 375577,
    50: 369979,
    51: 125640,
    52: 276755,
    53: 65455,
    54: 132514,
    55: 32923,
    56: 18645,
    57: 144342,
    58: 139799,
    59: 203277,
    60: 97915,
    61: 262017,
    62: 302168,
    63: 25136,
    64: 302779,
    65: 244947,
    66: 82405,
    67: 42878,
    68: 337179,
    69: 27367,
    70: 79561,
    71: 85634,
    72: 28858,
    73: 170005,
    74: 48275,
    75: 4982,
    76: 337960,
    77: 63793,
    78: 118057,
    79: 24136,
    80: 543457,
    81: 202834,
    82: 24927,
    83: 296383,
    84: 16807,
    85: 26923,
    86: 19577,
    87: 10582,
    88: 36263,
    89: 50296,
    90: 52419,
    91: 40689,
    92: 62744,
    93: 19050,
    94: 4132,
    95: 45121,
    96: 7688,
    97: 80939,
    98: 29018,
    99: 51489,
    100: 415882,
    101: 523669,
    102: 22059,
    103: 90591,
    104: 38063,
    105: 41018,
    106: 55345,
    107: 9506,
    108: 28718,
    109: 28925,
    110: 103446,
    111: 17151,
    112: 3249,
    113: 94031,
    114: 7744,
    115: 64231,
    116: 4165,
    117: 325903,
    118: 829411,
    119: 19237,
    120: 125185,
    121: 8974,
    122: 20282,
    123: 4764,
    124: 7237,
    125: 36741,
    126: 14942,
    127: 15084,
    128: 44170,
    129: 76632,
    130: 32807,
    131: 6191,
    132: 7362,
    133: 8124,
    134: 59124,
    135: 110952,
    136: 32442,
    137: 4978,
    138: 12210,
    139: 2161,
    140: 11230,
    141: 1038,
    142: 57978,
    143: 13506,
    144: 8142,
    145: 157800,
    146: 14125,
    147: 4187,
    148: 5437,
    149: 11972,
    150: 1685,
    151: 34090,
    152: 5964,
    153: 17992,
    154: 36310,
    155: 5069,
    156: 1110,
    157: 4591,
    158: 8578,
    159: 7603,
    160: 9177,
    161: 4629,
    162: 5684,
    163: 258679,
    164: 4460,
    165: 16816,
    166: 1395,
    167: 15891,
    168: 64847,
    169: 34961,
    170: 5216,
    171: 52960,
    172: 520297,
    173: 266667,
    174: 170895,
    175: 47333,
    176: 106439,
    177: 28674,
    178: 44014,
    179: 9808,
    180: 108999,
    181: 19395,
    182: 139848,
    183: 5681,
    184: 14017,
    185: 3543,
    186: 52284,
    187: 1047,
    188: 6882,
    189: 10528,
    190: 8299,
    191: 37369,
    192: 30816,
    193: 1309,
    194: 1384,
    195: 4436,
    196: 23098,
    197: 18830,
    198: 10221,
    199: 27287,
    255: 17883739
}
'''
